<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Moon</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wazxser.github.io/"/>
  <updated>2019-10-21T07:00:50.534Z</updated>
  <id>https://wazxser.github.io/</id>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Leetcode 146. LRU Cache</title>
    <link href="https://wazxser.github.io/2019/10/21/Leetcode-146/"/>
    <id>https://wazxser.github.io/2019/10/21/Leetcode-146/</id>
    <published>2019-10-21T06:59:23.000Z</published>
    <updated>2019-10-21T07:00:50.534Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/lru-cache/" target="_blank" rel="noopener">https://leetcode.com/problems/lru-cache/</a></p><p>代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">class LRUCache &#123;</span><br><span class="line">public:</span><br><span class="line">    LRUCache(int capacity) &#123;</span><br><span class="line">        cap = capacity;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    int get(int key) &#123;</span><br><span class="line">        auto it = m.find(key);</span><br><span class="line">        <span class="keyword">if</span>(it == m.end())</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        l.splice(l.begin(), l, it-&gt;second);</span><br><span class="line">        return it-&gt;second-&gt;second;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    void put(int key, int value) &#123;</span><br><span class="line">        auto it = m.find(key);</span><br><span class="line">        <span class="keyword">if</span>(it != m.end())&#123;</span><br><span class="line">            l.erase(it-&gt;second);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        l.push_front(make_pair(key, value));</span><br><span class="line">        m[key] = l.begin();</span><br><span class="line">        <span class="keyword">if</span>(m.size() &gt; cap)&#123;</span><br><span class="line">            int k = l.rbegin()-&gt;first;</span><br><span class="line">            l.pop_back();</span><br><span class="line">            m.erase(k);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    int cap;</span><br><span class="line">    unordered_map&lt;int, list&lt;pair&lt;int, int&gt;&gt;::iterator &gt; m;</span><br><span class="line">    list&lt;pair&lt;int, int&gt;&gt; l;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Your LRUCache object will be instantiated <span class="keyword">and</span> called <span class="keyword">as</span> such:</span><br><span class="line"> * LRUCache* obj = new LRUCache(capacity);</span><br><span class="line"> * int param_1 = obj-&gt;get(key);</span><br><span class="line"> * obj-&gt;put(key,value);</span><br><span class="line"> */</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/lru-cache/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode.com/problems/lru-cache/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;代码：
      
    
    </summary>
    
      <category term="Online Judge" scheme="https://wazxser.github.io/categories/Online-Judge/"/>
    
      <category term="Data structure" scheme="https://wazxser.github.io/categories/Online-Judge/Data-structure/"/>
    
    
      <category term="leetcode" scheme="https://wazxser.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 344. Reverse String</title>
    <link href="https://wazxser.github.io/2019/10/21/Leetcode-344/"/>
    <id>https://wazxser.github.io/2019/10/21/Leetcode-344/</id>
    <published>2019-10-21T06:33:05.000Z</published>
    <updated>2019-10-21T06:34:18.648Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/reverse-string/" target="_blank" rel="noopener">https://leetcode.com/problems/reverse-string/</a></p><p>代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    void reverseString(vector&lt;char&gt;&amp; s) &#123;</span><br><span class="line">        <span class="keyword">for</span>(int i = <span class="number">0</span>; i &lt; s.size() / <span class="number">2</span>; i++)&#123;</span><br><span class="line">            char temp = s[i];</span><br><span class="line">            s[i] = s[s.size() - <span class="number">1</span> - i];</span><br><span class="line">            s[s.size() - <span class="number">1</span> - i] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/reverse-string/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode.com/problems/reverse-string/&lt;/a&gt;&lt;
      
    
    </summary>
    
      <category term="Online Judge" scheme="https://wazxser.github.io/categories/Online-Judge/"/>
    
    
      <category term="leetcode" scheme="https://wazxser.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 138. Copy List with Random Pointer</title>
    <link href="https://wazxser.github.io/2019/10/21/Leetcode-138/"/>
    <id>https://wazxser.github.io/2019/10/21/Leetcode-138/</id>
    <published>2019-10-21T06:19:36.000Z</published>
    <updated>2019-10-21T06:21:18.747Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/copy-list-with-random-pointer/" target="_blank" rel="noopener">https://leetcode.com/problems/copy-list-with-random-pointer/</a></p><p>代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">// Definition <span class="keyword">for</span> a Node.</span><br><span class="line">class Node &#123;</span><br><span class="line">public:</span><br><span class="line">    int val;</span><br><span class="line">    Node* next;</span><br><span class="line">    Node* random;</span><br><span class="line"></span><br><span class="line">    Node() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    Node(int _val, Node* _next, Node* _random) &#123;</span><br><span class="line">        val = _val;</span><br><span class="line">        next = _next;</span><br><span class="line">        random = _random;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">*/</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    Node* copyRandomList(Node* head) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!head)</span><br><span class="line">            <span class="keyword">return</span> nullptr;</span><br><span class="line">        Node* res = new Node(head-&gt;val, nullptr, nullptr);</span><br><span class="line">        unordered_map&lt;Node*, Node*&gt; m;</span><br><span class="line">        m[head] = res;</span><br><span class="line">        Node* cur = head-&gt;next;</span><br><span class="line">        Node* cur2 = res;</span><br><span class="line">        <span class="keyword">while</span>(cur)&#123;</span><br><span class="line">            Node *node = new Node(cur-&gt;val, nullptr, nullptr);</span><br><span class="line">            cur2-&gt;next = node;</span><br><span class="line">            m[cur] = node;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">            cur2 = cur2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        cur = head;</span><br><span class="line">        cur2 = res;</span><br><span class="line">        <span class="keyword">while</span>(cur)&#123;</span><br><span class="line">            cur2-&gt;random = m[cur-&gt;random];</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">            cur2 = cur2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/copy-list-with-random-pointer/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode.com/problems/copy-
      
    
    </summary>
    
      <category term="Online Judge" scheme="https://wazxser.github.io/categories/Online-Judge/"/>
    
      <category term="List" scheme="https://wazxser.github.io/categories/Online-Judge/List/"/>
    
      <category term="Data structure" scheme="https://wazxser.github.io/categories/Online-Judge/List/Data-structure/"/>
    
    
      <category term="leetcode" scheme="https://wazxser.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 10. Regular Expression Matching</title>
    <link href="https://wazxser.github.io/2019/10/21/Leetcode-10/"/>
    <id>https://wazxser.github.io/2019/10/21/Leetcode-10/</id>
    <published>2019-10-21T05:58:18.000Z</published>
    <updated>2019-10-21T05:59:39.364Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/regular-expression-matching/" target="_blank" rel="noopener">https://leetcode.com/problems/regular-expression-matching/</a></p><p>题意：正则表达式匹配</p><p>代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    bool isMatch(string s, string p) &#123;</span><br><span class="line">        <span class="keyword">if</span>(p.empty())&#123;</span><br><span class="line">            <span class="keyword">return</span> s.empty();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(p.size() == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> (s.size() == <span class="number">1</span> &amp;&amp; (s[<span class="number">0</span>] == p[<span class="number">0</span>] || p[<span class="number">0</span>] == <span class="string">'.'</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(p[<span class="number">1</span>] != <span class="string">'*'</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.empty())</span><br><span class="line">                <span class="keyword">return</span> false;</span><br><span class="line">            <span class="keyword">return</span> (s[<span class="number">0</span>] == p[<span class="number">0</span>] || p[<span class="number">0</span>] == <span class="string">'.'</span>) &amp;&amp; isMatch(s.substr(<span class="number">1</span>), p.substr(<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(!s.empty() &amp;&amp; (s[<span class="number">0</span>] == p[<span class="number">0</span>] || p[<span class="number">0</span>] == <span class="string">'.'</span>))&#123;</span><br><span class="line">            <span class="keyword">if</span>(isMatch(s, p.substr(<span class="number">2</span>)))</span><br><span class="line">                <span class="keyword">return</span> true;</span><br><span class="line">            s = s.substr(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> isMatch(s, p.substr(<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/regular-expression-matching/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode.com/problems/regular
      
    
    </summary>
    
      <category term="Online Judge" scheme="https://wazxser.github.io/categories/Online-Judge/"/>
    
      <category term="DFS" scheme="https://wazxser.github.io/categories/Online-Judge/DFS/"/>
    
    
      <category term="leetcode" scheme="https://wazxser.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 49. Group Anagrams</title>
    <link href="https://wazxser.github.io/2019/10/21/Leetcode-49/"/>
    <id>https://wazxser.github.io/2019/10/21/Leetcode-49/</id>
    <published>2019-10-21T05:52:41.000Z</published>
    <updated>2019-10-21T05:53:55.027Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/group-anagrams/" target="_blank" rel="noopener">https://leetcode.com/problems/group-anagrams/</a></p><p>代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; groupAnagrams(vector&lt;string&gt;&amp; strs) &#123;</span><br><span class="line">        vector&lt;vector&lt;string&gt;&gt; res;</span><br><span class="line">        unordered_map&lt;string, vector&lt;string&gt;&gt; m;</span><br><span class="line">        <span class="keyword">for</span>(int i = <span class="number">0</span>; i &lt; strs.size(); i++)&#123;</span><br><span class="line">            string temp = strs[i];</span><br><span class="line">            sort(temp.begin(), temp.end());</span><br><span class="line">            m[temp].push_back(strs[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(auto i : m)&#123;</span><br><span class="line">            res.push_back(i.second);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/group-anagrams/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode.com/problems/group-anagrams/&lt;/a&gt;&lt;
      
    
    </summary>
    
      <category term="Online Judge" scheme="https://wazxser.github.io/categories/Online-Judge/"/>
    
      <category term="Data structure" scheme="https://wazxser.github.io/categories/Online-Judge/Data-structure/"/>
    
    
      <category term="leetcode" scheme="https://wazxser.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 7.Reverse Integer</title>
    <link href="https://wazxser.github.io/2019/10/21/Leetcode-7/"/>
    <id>https://wazxser.github.io/2019/10/21/Leetcode-7/</id>
    <published>2019-10-21T03:04:44.000Z</published>
    <updated>2019-10-21T05:48:19.205Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/reverse-integer/" target="_blank" rel="noopener">https://leetcode.com/problems/reverse-integer/</a></p><p>题意：将整数的数字反转，注意溢出</p><p>代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type x: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        num = str(x)</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(len(num)):</span><br><span class="line">            <span class="keyword">if</span> num[len(num)<span class="number">-1</span>-i].isdigit():</span><br><span class="line">                res = res*<span class="number">10</span> + int(num[len(num)<span class="number">-1</span>-i])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res = <span class="number">0</span> - res</span><br><span class="line">            <span class="keyword">if</span> abs(res) &gt; <span class="number">2</span>**<span class="number">31</span><span class="number">-1</span>:</span><br><span class="line">                res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int reverse(int x) &#123;</span><br><span class="line">        int res = <span class="number">0</span>;</span><br><span class="line">        int num = x;</span><br><span class="line">        long long temp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(num != <span class="number">0</span>)&#123;</span><br><span class="line">            temp = temp * <span class="number">10</span> + (num % <span class="number">10</span>);</span><br><span class="line">            num /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(temp &gt; pow(<span class="number">2</span>, <span class="number">31</span>) - <span class="number">1</span> || temp &lt; -pow(<span class="number">2</span>, <span class="number">31</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        res = static_cast&lt;int&gt;(temp);</span><br><span class="line">        //return x &gt; 0 ? res : res * -1;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/reverse-integer/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode.com/problems/reverse-integer/&lt;/a
      
    
    </summary>
    
      <category term="Online Judge" scheme="https://wazxser.github.io/categories/Online-Judge/"/>
    
    
      <category term="leetcode" scheme="https://wazxser.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 22. Generate Parentheses</title>
    <link href="https://wazxser.github.io/2019/10/20/Leetcode-22/"/>
    <id>https://wazxser.github.io/2019/10/20/Leetcode-22/</id>
    <published>2019-10-20T10:21:20.000Z</published>
    <updated>2019-10-20T10:23:30.861Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/generate-parentheses/" target="_blank" rel="noopener">https://leetcode.com/problems/generate-parentheses/</a></p><p>代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;string&gt; generateParenthesis(int n) &#123;</span><br><span class="line">        vector&lt;string&gt; res;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        dfs(n, n, <span class="string">""</span>, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    void dfs(int a, int b, string out, vector&lt;string&gt;&amp; res)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a &gt; b)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a == <span class="number">0</span> &amp;&amp; b == <span class="number">0</span>)</span><br><span class="line">            res.push_back(out);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(a &gt; <span class="number">0</span>)</span><br><span class="line">                dfs(a<span class="number">-1</span>, b, out+<span class="string">"("</span>, res);</span><br><span class="line">            <span class="keyword">if</span>(b &gt; <span class="number">0</span>)</span><br><span class="line">                dfs(a, b<span class="number">-1</span>, out+<span class="string">")"</span>, res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/generate-parentheses/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode.com/problems/generate-paren
      
    
    </summary>
    
      <category term="Online Judge" scheme="https://wazxser.github.io/categories/Online-Judge/"/>
    
      <category term="DFS" scheme="https://wazxser.github.io/categories/Online-Judge/DFS/"/>
    
    
      <category term="leetcode" scheme="https://wazxser.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 121. Best Time to Buy and Sell Stock</title>
    <link href="https://wazxser.github.io/2019/10/20/Leetcode-121/"/>
    <id>https://wazxser.github.io/2019/10/20/Leetcode-121/</id>
    <published>2019-10-20T10:03:51.000Z</published>
    <updated>2019-10-20T10:05:08.451Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock/" target="_blank" rel="noopener">https://leetcode.com/problems/best-time-to-buy-and-sell-stock/</a></p><p>代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int maxProfit(vector&lt;int&gt;&amp; prices) &#123;</span><br><span class="line">        <span class="keyword">if</span>(prices.size() == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        int small = prices[<span class="number">0</span>];</span><br><span class="line">        int res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(int i = <span class="number">1</span>; i &lt; prices.size(); i++)&#123;</span><br><span class="line">            small = min(small, prices[i]);</span><br><span class="line">            res = max(prices[i]-small, res);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxProfit</span><span class="params">(self, prices)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type prices: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        maxCur = <span class="number">0</span></span><br><span class="line">        maxSoFar = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>, len(prices)):</span><br><span class="line">            maxCur += prices[i] - prices[i<span class="number">-1</span>] </span><br><span class="line">            maxCur = max(<span class="number">0</span>, maxCur)</span><br><span class="line">            maxSoFar = max(maxSoFar, maxCur)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> maxSoFar</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/best-time-to-buy-and-sell-stock/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode.com/problems/bes
      
    
    </summary>
    
      <category term="Online Judge" scheme="https://wazxser.github.io/categories/Online-Judge/"/>
    
    
      <category term="leetcode" scheme="https://wazxser.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 33.Search in Rotated Sorted Array</title>
    <link href="https://wazxser.github.io/2019/10/18/Leetcode-33/"/>
    <id>https://wazxser.github.io/2019/10/18/Leetcode-33/</id>
    <published>2019-10-18T12:18:26.000Z</published>
    <updated>2019-10-18T12:20:11.077Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/search-in-rotated-sorted-array/" target="_blank" rel="noopener">https://leetcode.com/problems/search-in-rotated-sorted-array/</a></p><p>代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int search(vector&lt;int&gt;&amp; nums, int target) &#123;</span><br><span class="line">        int l = <span class="number">0</span>, r = nums.size()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l &lt;= r)&#123;</span><br><span class="line">            int m = (l+r)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[m] == target)&#123;</span><br><span class="line">                <span class="keyword">return</span> m;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(nums[l] &lt;= nums[m])&#123;</span><br><span class="line">                <span class="keyword">if</span>(target &lt; nums[m] &amp;&amp; target &gt;= nums[l])&#123;</span><br><span class="line">                    r = m<span class="number">-1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    l = m+<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(target &lt;= nums[r] &amp;&amp; target &gt; nums[m])&#123;</span><br><span class="line">                    l = m+<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    r = m<span class="number">-1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/search-in-rotated-sorted-array/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode.com/problems/sear
      
    
    </summary>
    
      <category term="Online Judge" scheme="https://wazxser.github.io/categories/Online-Judge/"/>
    
    
      <category term="leetcode" scheme="https://wazxser.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 56. Merge Intervals</title>
    <link href="https://wazxser.github.io/2019/10/18/Leetcode-56/"/>
    <id>https://wazxser.github.io/2019/10/18/Leetcode-56/</id>
    <published>2019-10-18T12:15:38.000Z</published>
    <updated>2019-10-18T12:17:45.031Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/merge-intervals/" target="_blank" rel="noopener">https://leetcode.com/problems/merge-intervals/</a></p><p>代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition <span class="keyword">for</span> an interval.</span><br><span class="line"> * struct Interval &#123;</span><br><span class="line"> *     int start;</span><br><span class="line"> *     int end;</span><br><span class="line"> *     Interval() : start(<span class="number">0</span>), end(<span class="number">0</span>) &#123;&#125;</span><br><span class="line"> *     Interval(int s, int e) : start(s), end(e) &#123;&#125;</span><br><span class="line"> * &#125;;</span><br><span class="line"> */</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    </span><br><span class="line">    static bool compare(Interval a, Interval b)&#123;</span><br><span class="line">        <span class="keyword">return</span> a.start &lt; b.start;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    vector&lt;Interval&gt; merge(vector&lt;Interval&gt;&amp; intervals) &#123;</span><br><span class="line">        <span class="keyword">if</span>(intervals.empty())</span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        sort(intervals.begin(), intervals.end(), compare);</span><br><span class="line">        </span><br><span class="line">        vector&lt;Interval&gt; res;</span><br><span class="line">        Interval temp(intervals[<span class="number">0</span>].start, intervals[<span class="number">0</span>].end);</span><br><span class="line">        <span class="keyword">for</span>(int i = <span class="number">1</span>; i &lt; intervals.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(temp.end &gt;= intervals[i].start)&#123;</span><br><span class="line">                temp.end = max(temp.end, intervals[i].end);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                res.push_back(temp);</span><br><span class="line">                temp = intervals[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        res.push_back(temp);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/merge-intervals/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode.com/problems/merge-intervals/&lt;/a
      
    
    </summary>
    
      <category term="Online Judge" scheme="https://wazxser.github.io/categories/Online-Judge/"/>
    
    
      <category term="leetcode" scheme="https://wazxser.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 206. Reverse Linked List</title>
    <link href="https://wazxser.github.io/2019/10/18/Leetcode-206/"/>
    <id>https://wazxser.github.io/2019/10/18/Leetcode-206/</id>
    <published>2019-10-18T12:09:12.000Z</published>
    <updated>2019-10-18T12:14:03.213Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/reverse-linked-list/" target="_blank" rel="noopener">https://leetcode.com/problems/reverse-linked-list/</a></p><p>题意：反转链表</p><p>代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition <span class="keyword">for</span> singly-linked list.</span><br><span class="line"> * struct ListNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     ListNode *next;</span><br><span class="line"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span><br><span class="line"> * &#125;;</span><br><span class="line"> */</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    ListNode* reverseList(ListNode* head) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!head)&#123;</span><br><span class="line">            <span class="keyword">return</span> NULL;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        if(!head-&gt;next)&#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        ListNode * ptr1, * ptr2, * ptr3;</span><br><span class="line">        ptr1 = head;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(ptr1)&#123;</span><br><span class="line">            ptr2 = ptr1-&gt;next;</span><br><span class="line">            ptr1-&gt;next = ptr3;</span><br><span class="line">            <span class="keyword">if</span>(!ptr2)&#123;</span><br><span class="line">                <span class="keyword">return</span> ptr1;</span><br><span class="line">            &#125;</span><br><span class="line">            ptr3 = ptr1;</span><br><span class="line">            ptr1 = ptr2;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ptr2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/reverse-linked-list/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode.com/problems/reverse-linked-
      
    
    </summary>
    
      <category term="Online Judge" scheme="https://wazxser.github.io/categories/Online-Judge/"/>
    
      <category term="List" scheme="https://wazxser.github.io/categories/Online-Judge/List/"/>
    
    
      <category term="leetcode" scheme="https://wazxser.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 23. Merge k Sorted Lists</title>
    <link href="https://wazxser.github.io/2019/10/18/Leetcode-23/"/>
    <id>https://wazxser.github.io/2019/10/18/Leetcode-23/</id>
    <published>2019-10-18T12:02:34.000Z</published>
    <updated>2019-10-18T12:14:03.211Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/merge-k-sorted-lists/" target="_blank" rel="noopener">https://leetcode.com/problems/merge-k-sorted-lists/</a></p><p>题意：合并k个已排好序的链表</p><p>代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition <span class="keyword">for</span> singly-linked list.</span><br><span class="line"> * struct ListNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     ListNode *next;</span><br><span class="line"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span><br><span class="line"> * &#125;;</span><br><span class="line"> */</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    ListNode* mergeKLists(vector&lt;ListNode*&gt;&amp; lists) &#123;</span><br><span class="line">        <span class="keyword">if</span>(lists.size() == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> NULL;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        ListNode* temp = new ListNode(<span class="number">-1</span>);</span><br><span class="line">        temp-&gt;next = lists[0];</span><br><span class="line">        ListNode * ptr1, *ptr2, *ptr3; </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(int i = <span class="number">1</span>; i &lt; lists.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!lists[i])&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ptr1 = lists[i];</span><br><span class="line">            ptr2 = temp;</span><br><span class="line">            ptr3 = temp-&gt;next;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span>(ptr1 &amp;&amp; ptr3)&#123;</span><br><span class="line">                if(ptr1-&gt;val &lt;= ptr3-&gt;val)&#123;</span><br><span class="line">                    ListNode * temp2 = ptr1-&gt;next;</span><br><span class="line">                    </span><br><span class="line">                    ptr2-&gt;next = ptr1;</span><br><span class="line">                    ptr1-&gt;next = ptr3;</span><br><span class="line">                    ptr2 = ptr2-&gt;next;</span><br><span class="line">                    </span><br><span class="line">                    ptr1 = temp2;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    ptr3 = ptr3-&gt;next;</span><br><span class="line">                    ptr2 = ptr2-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(ptr1)&#123;</span><br><span class="line">                ptr2-&gt;next = ptr1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        return temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/merge-k-sorted-lists/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode.com/problems/merge-k-sorted
      
    
    </summary>
    
      <category term="Online Judge" scheme="https://wazxser.github.io/categories/Online-Judge/"/>
    
      <category term="List" scheme="https://wazxser.github.io/categories/Online-Judge/List/"/>
    
    
      <category term="leetcode" scheme="https://wazxser.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 20. Valid Parentheses</title>
    <link href="https://wazxser.github.io/2019/10/18/Leetcode-20/"/>
    <id>https://wazxser.github.io/2019/10/18/Leetcode-20/</id>
    <published>2019-10-18T12:00:04.000Z</published>
    <updated>2019-10-18T12:14:03.206Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/valid-parentheses/" target="_blank" rel="noopener">https://leetcode.com/problems/valid-parentheses/</a></p><p>题意：括号匹配，栈的典型题</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValid</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        stack = []</span><br><span class="line">        <span class="keyword">for</span> ch <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> len(stack) == <span class="number">0</span>:</span><br><span class="line">                stack.append(ch)</span><br><span class="line">            <span class="keyword">elif</span> (stack[<span class="number">-1</span>] == <span class="string">'['</span> <span class="keyword">and</span> ch == <span class="string">']'</span>) <span class="keyword">or</span> (stack[<span class="number">-1</span>] == <span class="string">'&#123;'</span> <span class="keyword">and</span> ch == <span class="string">'&#125;'</span>) <span class="keyword">or</span> (stack[<span class="number">-1</span>] == <span class="string">'('</span> <span class="keyword">and</span> ch == <span class="string">')'</span>):</span><br><span class="line">                stack.pop()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                stack.append(ch)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(len(stack) &gt; <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/valid-parentheses/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode.com/problems/valid-parentheses
      
    
    </summary>
    
      <category term="Online Judge" scheme="https://wazxser.github.io/categories/Online-Judge/"/>
    
      <category term="stack" scheme="https://wazxser.github.io/categories/Online-Judge/stack/"/>
    
    
      <category term="leetcode" scheme="https://wazxser.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 21. Merge Two Sorted Lists</title>
    <link href="https://wazxser.github.io/2019/10/18/Leetcode-21/"/>
    <id>https://wazxser.github.io/2019/10/18/Leetcode-21/</id>
    <published>2019-10-18T11:57:26.000Z</published>
    <updated>2019-10-18T12:14:03.201Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/merge-two-sorted-lists/submissions/" target="_blank" rel="noopener">https://leetcode.com/problems/merge-two-sorted-lists/submissions/</a></p><p>题意：合并两个已经排好序的链表</p><p>代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span><span class="params">(self, l1, l2)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type l1: ListNode</span></span><br><span class="line"><span class="string">        :type l2: ListNode</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        temp = ListNode(<span class="number">0</span>)</span><br><span class="line">        temp.next = <span class="keyword">None</span></span><br><span class="line">        p = temp</span><br><span class="line">        <span class="keyword">while</span>(l1 <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> l2 <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>):</span><br><span class="line">            <span class="keyword">if</span> l1.val &lt; l2.val:</span><br><span class="line">                p.next = l1</span><br><span class="line">                l1 = l1.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                p.next = l2</span><br><span class="line">                l2 = l2.next</span><br><span class="line">            p = p.next</span><br><span class="line">        <span class="keyword">if</span> l1 <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            p.next = l1</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            p.next = l2</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> temp.next</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/merge-two-sorted-lists/submissions/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode.com/problems/
      
    
    </summary>
    
      <category term="Online Judge" scheme="https://wazxser.github.io/categories/Online-Judge/"/>
    
      <category term="List" scheme="https://wazxser.github.io/categories/Online-Judge/List/"/>
    
    
      <category term="leetcode" scheme="https://wazxser.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 53. Maximum Subarray</title>
    <link href="https://wazxser.github.io/2019/10/18/Leetcode-53/"/>
    <id>https://wazxser.github.io/2019/10/18/Leetcode-53/</id>
    <published>2019-10-18T11:55:23.000Z</published>
    <updated>2019-10-18T11:56:43.577Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/maximum-subarray/" target="_blank" rel="noopener">https://leetcode.com/problems/maximum-subarray/</a></p><p>题意：返回数组中连续和最大的和</p><p>代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxSubArray</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        l = g = <span class="number">-10000000000000000</span></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> nums:</span><br><span class="line">            l = max(n,l+n)</span><br><span class="line">            g = max(l,g)</span><br><span class="line">        <span class="keyword">return</span> g</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/maximum-subarray/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode.com/problems/maximum-subarray/&lt;
      
    
    </summary>
    
      <category term="Online Judge" scheme="https://wazxser.github.io/categories/Online-Judge/"/>
    
    
      <category term="leetcode" scheme="https://wazxser.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 15. 3Sum</title>
    <link href="https://wazxser.github.io/2019/10/18/Leetcode-15/"/>
    <id>https://wazxser.github.io/2019/10/18/Leetcode-15/</id>
    <published>2019-10-18T11:47:35.000Z</published>
    <updated>2019-10-18T11:50:27.002Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/3sum/" target="_blank" rel="noopener">https://leetcode.com/problems/3sum/</a></p><p>题意：求一个数组中，三个数字相加为0的组合，要求不能重复</p><p>思路：先排序，然后遍历查找，找剩下两个数字的时候，因为排序好了，所以分别从头尾一起查找</p><p>代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; threeSum(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        vector&lt;vector&lt;int&gt;&gt; res;</span><br><span class="line">        sort(nums.begin(), nums.end());</span><br><span class="line">        <span class="keyword">for</span>(int i = <span class="number">0</span>; i &lt; nums.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &gt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span>(i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i<span class="number">-1</span>])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            int a = i+<span class="number">1</span>; </span><br><span class="line">            int b = nums.size()<span class="number">-1</span>;</span><br><span class="line">            int target = <span class="number">0</span> - nums[i];</span><br><span class="line">            <span class="keyword">while</span>(a &lt; b)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[a] + nums[b] == target)&#123;</span><br><span class="line">                    res.push_back(&#123;nums[i], nums[a], nums[b]&#125;);</span><br><span class="line">                    <span class="keyword">while</span>(nums[a+<span class="number">1</span>] == nums[a] &amp;&amp; a &lt; b)</span><br><span class="line">                        a++;</span><br><span class="line">                    <span class="keyword">while</span>(nums[b<span class="number">-1</span>] == nums[b] &amp;&amp; a &lt; b)</span><br><span class="line">                        b--;</span><br><span class="line">                    a++;</span><br><span class="line">                    b--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(nums[a]+nums[b] &lt; target)&#123;</span><br><span class="line">                    a++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    b--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/3sum/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode.com/problems/3sum/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;题意：求一个数组中，三个数
      
    
    </summary>
    
      <category term="Online Judge" scheme="https://wazxser.github.io/categories/Online-Judge/"/>
    
    
      <category term="leetcode" scheme="https://wazxser.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 200. Number of Islands</title>
    <link href="https://wazxser.github.io/2019/10/18/Leetcode-200/"/>
    <id>https://wazxser.github.io/2019/10/18/Leetcode-200/</id>
    <published>2019-10-18T10:54:13.000Z</published>
    <updated>2019-10-18T11:39:55.099Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/number-of-islands/" target="_blank" rel="noopener">https://leetcode.com/problems/number-of-islands/</a></p><p>题意：典型的DFS题目，题目给出一个由0和1组成的矩阵，0代表水，1代表陆地。求矩阵中小岛的个数。</p><p>代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int numIslands(vector&lt;vector&lt;char&gt;&gt;&amp; grid) &#123;</span><br><span class="line">        <span class="keyword">if</span> (grid.empty() || grid[<span class="number">0</span>].empty()) </span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        int m = grid.size(), n = grid[<span class="number">0</span>].size();</span><br><span class="line">        int res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(int i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(int j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[i][j] == <span class="string">'1'</span>)&#123;</span><br><span class="line">                    res++;</span><br><span class="line">                    dfs(i, j, grid);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;   </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    void dfs(int i, int j, vector&lt;vector&lt;char&gt;&gt; &amp; grid)&#123;</span><br><span class="line">        int m = grid.size(), n = grid[<span class="number">0</span>].size();</span><br><span class="line">        grid[i][j] = <span class="string">'0'</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(i - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; grid[i<span class="number">-1</span>][j] == <span class="string">'1'</span>)&#123;</span><br><span class="line">            dfs(i<span class="number">-1</span>, j, grid);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(i + <span class="number">1</span> &lt; m &amp;&amp; grid[i+<span class="number">1</span>][j] == <span class="string">'1'</span>)&#123;</span><br><span class="line">            dfs(i+<span class="number">1</span>, j, grid);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(j - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; grid[i][j<span class="number">-1</span>] == <span class="string">'1'</span>)&#123;</span><br><span class="line">            dfs(i, j<span class="number">-1</span>, grid);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(j + <span class="number">1</span> &lt; n &amp;&amp; grid[i][j+<span class="number">1</span>] == <span class="string">'1'</span>)&#123;</span><br><span class="line">            dfs(i, j+<span class="number">1</span>, grid);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/number-of-islands/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode.com/problems/number-of-islands
      
    
    </summary>
    
      <category term="Online Judge" scheme="https://wazxser.github.io/categories/Online-Judge/"/>
    
      <category term="DFS" scheme="https://wazxser.github.io/categories/Online-Judge/DFS/"/>
    
    
      <category term="leetcode" scheme="https://wazxser.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 3. Longest Substring Without Repeating Characters</title>
    <link href="https://wazxser.github.io/2019/10/18/Leetcode-3/"/>
    <id>https://wazxser.github.io/2019/10/18/Leetcode-3/</id>
    <published>2019-10-18T10:48:35.000Z</published>
    <updated>2019-10-18T12:14:03.215Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/longest-substring-without-repeating-characters/" target="_blank" rel="noopener">https://leetcode.com/problems/longest-substring-without-repeating-characters/</a></p><p>题意：给定一个字符串，返回这个字符串中最长的不包含重复字母的子串的长度</p><p>思路：设置一个数组记录每个字符出现的最后位置，left左指针到当前位置为滑动窗口</p><p>代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int lengthOfLongestSubstring(string s) &#123;</span><br><span class="line">        int len = s.length();</span><br><span class="line">        int left = <span class="number">0</span>;</span><br><span class="line">        int last[<span class="number">255</span>];</span><br><span class="line">        int res = <span class="number">0</span>;</span><br><span class="line">        memset(last, <span class="number">-1</span>, sizeof last);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(int i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(last[s[i]] &gt;= left)&#123;</span><br><span class="line">                left = last[s[i]] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            last[s[i]] = i;</span><br><span class="line">            res = max(res, i-left+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/longest-substring-without-repeating-characters/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode.c
      
    
    </summary>
    
      <category term="Online Judge" scheme="https://wazxser.github.io/categories/Online-Judge/"/>
    
      <category term="string" scheme="https://wazxser.github.io/categories/Online-Judge/string/"/>
    
    
      <category term="leetcode" scheme="https://wazxser.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 5. Longest Palindromic Substring</title>
    <link href="https://wazxser.github.io/2019/10/18/Leetcode-5/"/>
    <id>https://wazxser.github.io/2019/10/18/Leetcode-5/</id>
    <published>2019-10-18T08:43:44.000Z</published>
    <updated>2019-10-18T12:14:02.677Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/longest-palindromic-substring/" target="_blank" rel="noopener">https://leetcode.com/problems/longest-palindromic-substring/</a></p><p>题意：搜索一个字符串中最长的回文序列</p><p>思路：回文序列的搜索以中间一个单独一个字母和中间两个相同字符分为两类</p><p>代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    string longestPalindrome(string s) &#123;</span><br><span class="line">        <span class="keyword">if</span>(s.length() == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">        int left = <span class="number">0</span>, right = <span class="number">0</span>, index = <span class="number">0</span>, len = <span class="number">0</span>, wide = <span class="number">0</span>, res_index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(int i = <span class="number">0</span>; i &lt; s.length()<span class="number">-1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] == s[i+<span class="number">1</span>])&#123;</span><br><span class="line">                index = searchPalindrome(s, i, i+<span class="number">1</span>, len);</span><br><span class="line">                <span class="keyword">if</span>(len &gt; wide)&#123;</span><br><span class="line">                    wide = len;</span><br><span class="line">                    res_index = index;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            index = searchPalindrome(s, i, i, len);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(len &gt; wide)&#123;</span><br><span class="line">                wide = len;</span><br><span class="line">                res_index = index;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> s.substr(res_index, wide);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    int searchPalindrome(string s, int left, int right, int &amp;len)&#123;</span><br><span class="line">        int index = <span class="number">0</span>;</span><br><span class="line">        int flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &gt; <span class="number">0</span> &amp;&amp; right &lt; s.length()<span class="number">-1</span>)&#123;</span><br><span class="line">            left -= <span class="number">1</span>;</span><br><span class="line">            right += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(s[left] != s[right])&#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag == <span class="number">1</span>)&#123;</span><br><span class="line">            len = right - left - <span class="number">1</span>;</span><br><span class="line">            index = left + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            len = right - left + <span class="number">1</span>;</span><br><span class="line">            index = left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/longest-palindromic-substring/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode.com/problems/longe
      
    
    </summary>
    
      <category term="Online Judge" scheme="https://wazxser.github.io/categories/Online-Judge/"/>
    
      <category term="string" scheme="https://wazxser.github.io/categories/Online-Judge/string/"/>
    
    
      <category term="leetcode" scheme="https://wazxser.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 4. Median of Two Sorted Arrays</title>
    <link href="https://wazxser.github.io/2019/10/18/Leetcode-4/"/>
    <id>https://wazxser.github.io/2019/10/18/Leetcode-4/</id>
    <published>2019-10-18T07:58:42.000Z</published>
    <updated>2019-10-18T12:14:03.193Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/median-of-two-sorted-arrays/" target="_blank" rel="noopener">https://leetcode.com/problems/median-of-two-sorted-arrays/</a></p><p>这道题的题意是给定两个已经排好序的数组，求这两个数组所有数字的中位数，要求时间复杂度是O(log(m+n))的（应该自然想到<br>是二分法）</p><p>这道题感觉有点难，看了半天代码也看不懂是什么意思。。。，不过这样的题确实有意思。。。</p><p>思路： 在两个数组中找两个分解点i，j，保证0～i-1加0～j-1是两个数组的长度之和的一半，目标就是确定i和j的位置，使得<br>i-1位置数字也小于j位置数字（i-1位置数字保证小于i位置数字）和j-1位置数字小于i位置数字，这样0～i-1和0～j-1位置所有<br>数字都小于另一半部分的数字，中位数就是i-1和j-1位置数字的较大值和i位置和j位置数字的较小值的均值（两个数组所有数字<br>个数是偶数的话），或者i-1和j-1位置数字的较大值</p><p>代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    double findMedianSortedArrays(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) &#123;</span><br><span class="line">        int m = nums1.size(), n = nums2.size();</span><br><span class="line">        <span class="keyword">if</span>(m &gt; n)</span><br><span class="line">            <span class="keyword">return</span> findMedianSortedArrays(nums2, nums1);</span><br><span class="line">        </span><br><span class="line">        int left = <span class="number">0</span>, right = m;</span><br><span class="line">        int i = <span class="number">-1</span>, j = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(true)&#123;</span><br><span class="line">            i = (left + right) / <span class="number">2</span>;</span><br><span class="line">            j = (m + n + <span class="number">1</span>) / <span class="number">2</span> - i;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>((i == <span class="number">0</span> || j == n || nums1[i - <span class="number">1</span>] &lt;= nums2[j]) &amp;&amp; </span><br><span class="line">               (j == <span class="number">0</span> || i == m || nums2[j - <span class="number">1</span>] &lt;= nums1[i]))&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i &gt; <span class="number">0</span> &amp;&amp; nums1[i<span class="number">-1</span>] &gt; nums2[j])&#123;</span><br><span class="line">                right = i - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(j &gt; <span class="number">0</span> &amp;&amp; nums2[j<span class="number">-1</span>] &gt; nums1[i])&#123;</span><br><span class="line">                left = i + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        int max_left = <span class="number">-1</span>, min_right = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">0</span>)&#123;</span><br><span class="line">            max_left = nums2[j<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(j == <span class="number">0</span>)&#123;</span><br><span class="line">            max_left = nums1[i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            max_left = max(nums1[i - <span class="number">1</span>], nums2[j - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>((m+n) % <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> max_left;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(i == m) </span><br><span class="line">            min_right = nums2[j];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(j == n) </span><br><span class="line">            min_right = nums1[i];</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            min_right = min(nums1[i], nums2[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> double(max_left + min_right) / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/median-of-two-sorted-arrays/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode.com/problems/median-
      
    
    </summary>
    
      <category term="Online Judge" scheme="https://wazxser.github.io/categories/Online-Judge/"/>
    
      <category term="二分查找" scheme="https://wazxser.github.io/categories/Online-Judge/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
    
      <category term="leetcode" scheme="https://wazxser.github.io/tags/leetcode/"/>
    
  </entry>
  
</feed>
